#+TITLE:    Emacs Configuration
#+AUTHOR:   Trumae da Ilha 
#+BABEL:    :cache yes
#+PROPERTY: header-args :tangle yes
#+STARTUP:  overview

* First-time initialization

If you are using this configuration for the first time, you
should put the following code on =.emacs.d/init.el=. It is
responsible for bootstrapping the entire thing. Notice that
it is not tangled along with the rest!

#+begin_src emacs-lisp :tangle no
  (require 'org)

  (find-file (concat user-emacs-directory "init.org"))
  (org-babel-tangle)
  (load-file (concat user-emacs-directory "init.el"))
  (byte-compile-file (concat user-emacs-directory "init.el"))
#+end_src

* Preparation
** Bootstrapping

This init file is heavily inspired by [[https://github.com/freetonik/emacs-dotfiles][freetonik]]'s.

Tangle and compile this file on save.

#+begin_src emacs-lisp
  ;;;; -*- lexical-binding: t -*-

  ;;;; Initialization

  (defun tangle-init ()
    "If the current buffer is 'init.org' the code-blocks are
    tangled, and the tangled file is compiled."
    (when (equal (buffer-file-name)
		 (expand-file-name (concat user-emacs-directory "init.org")))
      ;; Avoid running hooks when tangling.
      (let ((prog-mode-hook nil))
	(org-babel-tangle)
	(byte-compile-file (concat user-emacs-directory "init.el")))))

  (add-hook 'after-save-hook 'tangle-init)
#+end_src

Remove /functions might not be defined at runtime/ warnings.

#+begin_src emacs-lisp
  ;;(eval-when-compile
  ;;  (setq use-package-expand-minimally byte-compile-current-file))
#+end_src

** Packaging

Prepare packages.

#+begin_src emacs-lisp
;;;; Packaging

(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
			 ;;("marmalade" . "https://marmalade-repo.org/packages/")
			 ;;("melpa-stable" . "https://stable.melpa.org/packages/")
			 ("melpa" . "https://melpa.org/packages/")
			 ("org" . "https://orgmode.org/elpa/")))

(package-initialize)
#+end_src

Install use-package.

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile (require 'use-package))

  (setq use-package-always-ensure t)
#+end_src

** Custom

The custom file is a thing I never plan to touch.
Let's move it out of the way.

#+begin_src emacs-lisp
  (setq custom-file (expand-file-name (concat user-emacs-directory "sensitive/custom.el")))
  (load custom-file)
#+end_src

* Appearance

** Fonts

There are many fonts I usually choose. I just uncomment as needed.

#+begin_src emacs-lisp
  ;;(defconst my-default-font "-*-fixed-medium-r-normal-*-15-*-*-*-*-*-*-*")
  ;;(defconst my-default-font "-misc-fixed-*-*-*-*-12-*-*-*-*-*-*-*")
  ;;(defconst my-default-font "-b&h-lucidatypewriter-medium-r-normal-sans-14-*-*-*-*-*-iso8859-1")
  ;;(defconst my-default-font "FantasqueSansMono Nerd Font-10")
  ;;(defconst my-default-font "Monoid-9")
  ;;(defconst my-default-font "Fixed-10")
  (defconst my-default-font "Dina-10")
  ;;(defconst my-default-font "Iosevka-9")
  ;;(defconst my-default-font "Terminus-10")
  ;;(defconst my-default-font "Hack-10")
#+end_src

** Visual

We create a frame a-list which is applied, so that we have customizations
set at standalone or daemonized Emacs.

#+begin_src emacs-lisp
  (defconst my-frame-alist
    `((font                 . ,my-default-font)
      (scroll-bar           . -1)
      (height               . 60)
      (width                . 95)
      (alpha                . 95)
      (vertical-scroll-bars . nil)))
  (setq default-frame-alist my-frame-alist)
#+end_src

I use kaolin-bubblegum as my default theme.

#+begin_src emacs-lisp
  (use-package kaolin-themes
    :config (load-theme 'kaolin-bubblegum t))
#+end_src

There are also some general rules I set up manually.

#+begin_src emacs-lisp
  (setq inhibit-startup-screen        t
	inhibit-splash-screen         t
	show-paren-mode               1
	show-paren-delay              0
	scroll-bar-mode               -1
	browser-url-browse-function   'browse-url-firefox
	linum-format                  "%5d"
	tab-width                     4
	;; Mouse
	transentient-mark-mode        t
	mouse-wheel-follow-mouse      t
	scroll-step                   1
	scroll-conservatively         101
	mouse-wheel-scroll-amount     '(1)
	mouse-wheel-progressive-speed nil)
  (menu-bar-mode -99)
  (tool-bar-mode -1)
#+end_src

Unfortunately, =linum-mode= doesn't work properly with some
buffers, so we add it to the hook for programming modes.

#+begin_src lisp
  (add-hook 'prog-mode-hook 'linum-mode)
#+end_src

** Keybindings

Increasing/decreasing text is useful on presentations.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-+") #'text-scale-increase)
  (global-set-key (kbd "C--") #'text-scale-decrease)
#+end_src

We also set some bindings for mouse scrolling. They work with the
mouse variables which we've already set before.

#+begin_src emacs-lisp
  (global-set-key (kbd "<mouse-4>")   'scroll-down-line)
  (global-set-key (kbd "<mouse-5>")   'scroll-up-line)
  (global-set-key (kbd "<C-mouse-4>") 'scroll-down-command)
  (global-set-key (kbd "<C-mouse-5>") 'scroll-up-command)

  (xterm-mouse-mode)
#+end_src

** Autocompletion

#+begin_src emacs-lisp
  (setq tab-always-indent 'complete)
  (add-to-list 'completion-styles 'initials t)
#+end_src

** Modeline

I use =telephone-line= for that.

#+begin_src emacs-lisp
  (use-package telephone-line
    :config (progn
	      (setq telephone-line-primary-left-separator    'telephone-line-cubed-left
		    telephone-line-secondary-left-separator  'telephone-line-cubed-hollow-left
		    telephone-line-primary-right-separator   'telephone-line-cubed-right
		    telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-right
		    telephone-line-height                    24
		    telephone-line-evil-use-short-tag        t))
    (telephone-line-mode 1))
#+end_src

* Language Configurations

Now we create configurations for programming languages.

This should give us nice guide rulers for indentation.
#+TODO: Add indent-guide.

This should give us nice, highlighted numbers across all programming
languages.

#+begin_src emacs-lisp
  (use-package highlight-numbers
    :config (add-hook 'prog-mode-hook 'highlight-numbers-mode))
#+end_src

Let's also install and/or configure globally-needed packages, such as
Flycheck and Semantic.

#+begin_src emacs-lisp
  (use-package flycheck)
  (require 'semantic)

  (global-semanticdb-minor-mode        1)
  (global-semantic-idle-scheduler-mode 1)
  (global-semantic-stickyfunc-mode     0)

  (semantic-mode 1)
#+end_src


** Assembly

Make sure =nasm-mode= is used for all Assembly files.

#+begin_src emacs-lisp
  (use-package nasm-mode
    :config (add-to-list 'auto-mode-alist '("\\.asm\\'" . nasm-mode)))
#+end_src

** C/C++

Configure C/C++ support for my taste. Defaults include indentation
of width 4 with spaces, K&R style.

#+begin_src emacs-lisp
  (require 'cc-mode)

  (defun my-c-mode-hook ()
    (setq c-basic-offset   4
	  c-default-style  "k&r"
	  indent-tabs-mode nil)
    (c-set-offset 'substatement-open 0))

  (add-hook 'c++-mode-hook #'my-c-mode-hook)
  (add-hook 'c-mode-hook   #'my-c-mode-hook)
#+end_src

Setup CMake IDE. Notice that we need to have rtags installed
on the system.

#+begin_src emacs-lisp
  (use-package rtags)
  (use-package cmake-ide
    :config (cmake-ide-setup))
#+end_src

Setup Company C Headers for autocompletion.

#+begin_src emacs-lisp
  (use-package company)
  (use-package company-c-headers
    :requires company
    :init (add-to-list 'company-backends 'company-c-headers))
#+end_src

To help with autocompletion, we use semantic, previously configured.

** Forth

Use forth-mode and configure keybindings for evaluating code blocks.

#+begin_src emacs-lisp
  (use-package forth-mode
    :config (progn
	      (define-key forth-mode-map (kbd "C-x C-e") #'forth-eval-last-expression)
	      (define-key forth-mode-map (kbd "C-c C-c") #'forth-eval-region)))

#+end_src

** Go

We use go-mode and godoctor to help with autocompletions and indentations.
We also set indentation to tabs of width 4.

We also rely on flycheck for Go.

#+begin_src emacs-lisp
  (use-package go-mode
    :config (progn
	      (use-package godoctor)
	      (add-hook 'go-mode-hook #'company-mode)
	      (add-hook 'go-mode-hook  #'flycheck-mode)
	      (add-hook 'go-mode-hook (lambda ()
					(setq indent-tabs-mode 1
					      tab-width        4)))
	      (add-to-list 'company-backends 'company-go)))
#+end_src

** Lisp

There are many dialects of Lisp! I mostly work with Common Lisp,
Scheme, Elisp and Racket.

*** Common Lisp

#+begin_src emacs-lisp
(load (expand-file-name "~/quicklisp/slime-helper.el"))
;;(setq inferior-lisp-program "ccl")
(setq inferior-lisp-program "sbcl")
;;(setq inferior-lisp-program "/home/trumae/lisp/ccl/lx86cl64")
#+end_src

*** Scheme

We just make sure Geiser is installed, Plus, set its default implementation
to Chez Scheme.

#+begin_src emacs-lisp
  (use-package geiser
    :config (setq geiser-default-implementation 'chez))
#+end_src

*** Appearance

Use prettify-symbols-mode on all Lisps.

#+begin_src emacs-lisp
  (add-hook 'lisp-mode-hook       #'prettify-symbols-mode)
  (add-hook 'emacs-lisp-mode-hook #'prettify-symbols-mode)
  (add-hook 'scheme-mode-hook     #'prettify-symbols-mode)
#+end_src

Use rainbow-delimiters to colorize parens.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :config (progn
              (add-hook 'lisp-mode-hook       #'rainbow-delimiters-mode)
              (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
              (add-hook 'scheme-mode-hook     #'rainbow-delimiters-mode)))
#+end_src

** Rust

Make some adjustments to support Rust language. We use rust-mode and
racer via company for autocompletions.

#+begin_src emacs-lisp
  (use-package rust-mode
    :config (progn
	      (add-hook 'rust-mode-hook 'cargo-minor-mode)
	      (add-hook 'rust-mode-hook
			(lambda ()
			  (local-set-key (kbd "C-c <tab>") #'rust-format-buffer)))
	      (use-package racer
		:config (progn
			  (add-hook 'rust-mode-hook #'racer-mode)
			  (add-hook 'racer-mode-hook #'eldoc-mode)
			  (add-hook 'racer-mode-hook #'company-mode)))
	      (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
	      (setq company-tooltip-align-annotations t)))
#+end_src

* Miscellaneous

Now we'll configure some useful tools.

** Company

#+begin_src emacs-lisp
  (use-package company
    :config (add-hook 'after-init-hook 'global-company-mode))
#+end_src

** Ansi-Term

Bind the F7 key to opening a new buffer with ZSH.

#+begin_src emacs-lisp
  (global-set-key [f7]
		  (lambda ()
		    (interactive)
		    (split-window-sensibly)
		    (other-window 1)
		    (ansi-term "/bin/zsh")))
#+end_src

** Projectile

I like to use Projectile for managing my projects.

#+begin_src emacs-lisp
  (use-package projectile)
#+end_src

** Neotree

I also like Neotree on the F8 key.

#+begin_src emacs-lisp
  (use-package all-the-icons)
  (use-package neotree
    :requires all-the-icons
    :config (progn
	      (global-set-key [f8] 'neotree-toggle)
	      (setq neo-theme (if (or (display-graphic-p)
				      (daemonp))
				  'icons
				'arrow)
		    projectile-switch-project-action 'neotree-project-action)))
#+end_src

** nov.el

Nov.el is good for reading EPUB files on Emacs.

#+begin_src emacs-lisp
  (use-package nov
    :config (progn
	      (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
	      (add-hook 'nav-mode-hook
			(lambda ()
			  (face-remap-add-relative 'variable-pitch
						   :family "Liberation Serif"
						   :height 1.0)))
	      (setq nov-text-width 80)))
#+end_src


** Magit

Magit is the awesome tool for Git usage.

#+begin_src emacs-lisp
  (use-package magit)
#+end_src

** Symon

Tiny graphical system monitor

#+begin_src emacs-lisp
  ;;(use-package symon)
  ;;(symon-mode)
#+end_src

** Ack 

This package brings the full power of ack to emacs by allowing you to run it seamlessly with its large set of options. Ack-like tools such as the silver searcher and git/hg/bzr grep are well supported too.

#+begin_src emacs-lisp
  (use-package ack)
#+end_src

** Google Translate

This package allows to translate the strings using Google Translate service directly from GNU Emacs.

#+begin_src emacs-lisp
   (use-package google-translate)
   ;;(use-package google-translate-default-ui)
   (global-set-key "\C-ct" 'google-translate-at-point)
   (global-set-key "\C-cT" 'google-translate-query-translate)
#+end_src

** Sublimity

smooth-scrolling, minimap and distraction-free mode (inspired by the sublime editor)

#+begin_src emacs-lisp
   (use-package sublimity)
   (sublimity-mode 1)
#+end_src


** Beacon

light that follows your cursor around so you don't lose it! 

#+begin_src emacs-lisp
   (use-package beacon)
   (beacon-mode 1)
#+end_src

** Org-Trello

Org-trello is an emacs minor mode to extend org-mode with Trello abilities.


#+begin_src emacs-lisp
   (use-package org-trello)
#+end_src


